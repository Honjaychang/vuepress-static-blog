(window.webpackJsonp=window.webpackJsonp||[]).push([[31],{385:function(t,s,e){"use strict";e.r(s);var n=e(42),a=Object(n.a)({},(function(){var t=this,s=t.$createElement,e=t._self._c||s;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h1",{attrs:{id:"node"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#node"}},[t._v("#")]),t._v(" Node")]),t._v(" "),e("p",[e("code",[t._v("events")])]),t._v(" "),e("ul",[e("li",[e("code",[t._v("events.EventEmitter")]),t._v(" 的核心就是事件触发与事件监听器功能的封装")]),t._v(" "),e("li",[t._v("当事件触发时，注册到这个事件的事件监听器被依次调用，事件参数作为回调函数参数传递")])]),t._v(" "),e("p",[t._v("方法")]),t._v(" "),e("ul",[e("li",[e("p",[e("code",[t._v("addListener(event, listener)")])]),t._v(" "),e("ul",[e("li",[t._v("为指定事件添加一个监听器到监听器数组的尾部")])])]),t._v(" "),e("li",[e("p",[e("code",[t._v("on(event, listener)")])]),t._v(" "),e("ul",[e("li",[t._v("为指定事件注册一个监听器")])])]),t._v(" "),e("li",[e("p",[e("code",[t._v("once(event, listener)")])]),t._v(" "),e("ul",[e("li",[t._v("为指定事件注册一个单次监听器，即 监听器最多只会触发一次，触发后立刻解除该监听器")])])]),t._v(" "),e("li",[e("p",[e("code",[t._v("removeListener(event, listener)")])]),t._v(" "),e("ul",[e("li",[t._v("移除指定事件的某个监听器，监听器必须是该事件已经注册过的监听器")])])]),t._v(" "),e("li",[e("p",[e("code",[t._v("removeAllListeners([event])")])]),t._v(" "),e("ul",[e("li",[t._v("移除所有事件的所有监听器， 如果指定事件，则移除指定事件的所有监听器")])])]),t._v(" "),e("li",[e("p",[e("code",[t._v("setMaxListeners(n)")])]),t._v(" "),e("ul",[e("li",[e("code",[t._v("setMaxListeners")]),t._v(" 函数用于改变监听器的默认限制的数量 (默认10个输出警告)")])])]),t._v(" "),e("li",[e("p",[e("code",[t._v("listeners(event)")])]),t._v(" "),e("ul",[e("li",[t._v("返回指定事件的监听器数组")])])]),t._v(" "),e("li",[e("p",[e("code",[t._v("emit(event, [arg1],[arg2],[...])")])]),t._v(" "),e("ul",[e("li",[t._v("按监听器的顺序执行每个监听器，如果事件有注册监听返回 "),e("code",[t._v("true")]),t._v("，否则返回 "),e("code",[t._v("false")])])])]),t._v(" "),e("li",[e("p",[t._v("类方法 "),e("code",[t._v("listenerCount(emitter, event)")])]),t._v(" "),e("ul",[e("li",[e("code",[t._v("events.emitter.listenerCount(eventName)")]),t._v(" 返回指定事件的监听器数量")])])])]),t._v(" "),e("div",{staticClass:"language-js line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-js"}},[e("code",[e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// on 绑定 emit 触发")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 引入 events 模块")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" events "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("require")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'events'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 创建 eventEmitter 对象")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" eventEmitter "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("events"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("EventEmitter")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n \n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 创建事件处理程序")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function-variable function"}},[t._v("connectHandler")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("connected")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n   console"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'连接成功。'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  \n   "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 触发 data_received 事件 ")]),t._v("\n   eventEmitter"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("emit")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'data_received'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n \n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 绑定 connection 事件处理程序")]),t._v("\neventEmitter"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("on")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'connection'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" connectHandler"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n \n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 使用匿名函数绑定 data_received 事件")]),t._v("\neventEmitter"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("on")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'data_received'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n   console"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'数据接收成功。'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n \n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 触发 connection 事件 ")]),t._v("\neventEmitter"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("emit")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'connection'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n \nconsole"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"程序执行完毕。"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),t._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[t._v("1")]),e("br"),e("span",{staticClass:"line-number"},[t._v("2")]),e("br"),e("span",{staticClass:"line-number"},[t._v("3")]),e("br"),e("span",{staticClass:"line-number"},[t._v("4")]),e("br"),e("span",{staticClass:"line-number"},[t._v("5")]),e("br"),e("span",{staticClass:"line-number"},[t._v("6")]),e("br"),e("span",{staticClass:"line-number"},[t._v("7")]),e("br"),e("span",{staticClass:"line-number"},[t._v("8")]),e("br"),e("span",{staticClass:"line-number"},[t._v("9")]),e("br"),e("span",{staticClass:"line-number"},[t._v("10")]),e("br"),e("span",{staticClass:"line-number"},[t._v("11")]),e("br"),e("span",{staticClass:"line-number"},[t._v("12")]),e("br"),e("span",{staticClass:"line-number"},[t._v("13")]),e("br"),e("span",{staticClass:"line-number"},[t._v("14")]),e("br"),e("span",{staticClass:"line-number"},[t._v("15")]),e("br"),e("span",{staticClass:"line-number"},[t._v("16")]),e("br"),e("span",{staticClass:"line-number"},[t._v("17")]),e("br"),e("span",{staticClass:"line-number"},[t._v("18")]),e("br"),e("span",{staticClass:"line-number"},[t._v("19")]),e("br"),e("span",{staticClass:"line-number"},[t._v("20")]),e("br"),e("span",{staticClass:"line-number"},[t._v("21")]),e("br"),e("span",{staticClass:"line-number"},[t._v("22")]),e("br"),e("span",{staticClass:"line-number"},[t._v("23")]),e("br"),e("span",{staticClass:"line-number"},[t._v("24")]),e("br"),e("span",{staticClass:"line-number"},[t._v("25")]),e("br"),e("span",{staticClass:"line-number"},[t._v("26")]),e("br")])]),e("h2",{attrs:{id:"buffer"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#buffer"}},[t._v("#")]),t._v(" "),e("code",[t._v("Buffer")])]),t._v(" "),e("ul",[e("li",[t._v("缓冲区")]),t._v(" "),e("li",[t._v("使用 "),e("code",[t._v("Buffer.from()")]),t._v("接口去创建 "),e("code",[t._v("Buffer")]),t._v(" 对象")])]),t._v(" "),e("h4",{attrs:{id:"创建-buffer-类"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#创建-buffer-类"}},[t._v("#")]),t._v(" 创建 "),e("code",[t._v("Buffer")]),t._v(" 类")]),t._v(" "),e("ul",[e("li",[e("code",[t._v("Buffer.alloc(size[, fill[, encoding]])")]),t._v(" "),e("ul",[e("li",[t._v("返回一个指定大小的 "),e("code",[t._v("Buffer")]),t._v(" 实例，如果没有设置 "),e("code",[t._v("fill")]),t._v("，则默认填满 "),e("code",[t._v("0")])]),t._v(" "),e("li",[e("code",[t._v("Buffer.alloc(10, 1)")]),t._v(" "),e("code",[t._v("0x1")]),t._v("  16进制填充")])])]),t._v(" "),e("li",[e("code",[t._v("Buffer.allocUnsafe(size)")]),t._v(" "),e("ul",[e("li",[t._v("返回一个指定大小的 "),e("code",[t._v("Buffer")]),t._v(" 实例，可能包含旧数据。需要使用"),e("code",[t._v("fil()/write()")]),t._v("重写")])])]),t._v(" "),e("li",[e("code",[t._v("Buffer.allocUnsafeSlow(size)")])]),t._v(" "),e("li",[e("code",[t._v("Buffer.from(array)")]),t._v(" "),e("ul",[e("li",[t._v("返回一个被 "),e("code",[t._v("array")]),t._v(" 的值初始化的新的 "),e("code",[t._v("Buffer")]),t._v(" 实例（传入的 "),e("code",[t._v("array")]),t._v(" 的元素只能是数字，不然就会自动被 "),e("code",[t._v("0")]),t._v(" 覆盖）")]),t._v(" "),e("li",[e("code",[t._v("Buffer.from([1, 2, 3]) => [0x1, 0x2, 0x3]")])])])]),t._v(" "),e("li",[e("code",[t._v("Buffer.from(arrayBuffer[, byteOffset[, length]])")]),t._v(" "),e("ul",[e("li",[t._v("返回一个新建的与给定的 "),e("code",[t._v("ArrayBuffer")]),t._v(" 共享同一内存的 "),e("code",[t._v("Buffer")])])])]),t._v(" "),e("li",[e("code",[t._v("Buffer.from(buffer)")]),t._v(" "),e("ul",[e("li",[t._v("复制传入的 "),e("code",[t._v("Buffer")]),t._v(" 实例的数据，并返回一个新的 "),e("code",[t._v("Buffer")]),t._v(" 实例")])])]),t._v(" "),e("li",[e("code",[t._v("Buffer.from(string[, encoding])")]),t._v(" "),e("ul",[e("li",[t._v("返回一个被 "),e("code",[t._v("string")]),t._v(" 的值初始化的新的 "),e("code",[t._v("Buffer")]),t._v(" 实例")]),t._v(" "),e("li",[e("code",[t._v('Buffer.from("runoob", "ascii"); // <Buffer 72 75 6e 6f 6f 62>*')])])])])]),t._v(" "),e("h5",{attrs:{id:"写入缓冲区"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#写入缓冲区"}},[t._v("#")]),t._v(" 写入缓冲区")]),t._v(" "),e("p",[e("code",[t._v("buf.write(string[, offset[, length]][, encoding])")])]),t._v(" "),e("div",{staticClass:"language-js line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-js"}},[e("code",[t._v("buf "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" Buffer"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("alloc")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("256")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nlen "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" buf"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("write")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"www.runoob.com"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 14")]),t._v("\n")])]),t._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[t._v("1")]),e("br"),e("span",{staticClass:"line-number"},[t._v("2")]),e("br")])]),e("h5",{attrs:{id:"缓冲区读取数据"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#缓冲区读取数据"}},[t._v("#")]),t._v(" 缓冲区读取数据")]),t._v(" "),e("p",[e("code",[t._v("buf.toString([encoding[, start[, end]]])")])]),t._v(" "),e("ul",[e("li",[t._v("默认使用"),e("code",[t._v("utf8")])])]),t._v(" "),e("h5",{attrs:{id:"将-buffer-转换为-json-对象"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#将-buffer-转换为-json-对象"}},[t._v("#")]),t._v(" 将 "),e("code",[t._v("Buffer")]),t._v(" 转换为 "),e("code",[t._v("JSON")]),t._v(" 对象")]),t._v(" "),e("ul",[e("li",[e("p",[e("code",[t._v("buf.toJSON()")])])]),t._v(" "),e("li",[e("p",[t._v("当字符串化一个 "),e("code",[t._v("Buffer")]),t._v(" 实例时，"),e("code",[t._v("JSON.stringify()")]),t._v(" 会隐式地调用该 "),e("code",[t._v("toJSON()")])])])]),t._v(" "),e("p",[t._v("缓冲区合并")]),t._v(" "),e("p",[e("code",[t._v("Buffer.concat(list[, totalLength])")])]),t._v(" "),e("p",[t._v("缓冲区比较")]),t._v(" "),e("ul",[e("li",[e("code",[t._v("buf.compare(otherBuffer)")]),t._v(" 按位比较 ASCII？\n"),e("ul",[e("li",[e("code",[t._v("< 0 buffer1 在 buffer2之前")])]),t._v(" "),e("li",[e("code",[t._v("= 0 buffer1 与 buffer2相同")])]),t._v(" "),e("li",[e("code",[t._v("> 0 buffer1 在 buffer2之后")])])])])]),t._v(" "),e("p",[t._v("拷贝缓冲区")]),t._v(" "),e("p",[e("code",[t._v("buf.copy(targetBuffer[, targetStart[, sourceStart[, sourceEnd]]])")])]),t._v(" "),e("p",[t._v("缓冲区裁剪")]),t._v(" "),e("ul",[e("li",[e("code",[t._v("buf.slice(start[, end])")])]),t._v(" "),e("li",[t._v("操作的是与原始 buffer 同一块内存区域")])]),t._v(" "),e("p",[t._v("缓冲区长度")]),t._v(" "),e("ul",[e("li",[e("code",[t._v("buf.length")])])]),t._v(" "),e("p",[e("code",[t._v("Stream")])]),t._v(" "),e("p",[t._v("所有的 Stream 对象都是 EventEmitter 的实例。常用的事件有：")]),t._v(" "),e("ul",[e("li",[e("code",[t._v("data")]),t._v(" - 当有数据可读时触发。")]),t._v(" "),e("li",[e("code",[t._v("end")]),t._v(" - 没有更多的数据可读时触发。")]),t._v(" "),e("li",[e("code",[t._v("error")]),t._v(" - 在接收和写入过程中发生错误时触发。")]),t._v(" "),e("li",[e("code",[t._v("finish")]),t._v(" - 所有数据已被写入到底层系统时触发。")])])])}),[],!1,null,null,null);s.default=a.exports}}]);